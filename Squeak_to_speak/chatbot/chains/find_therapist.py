from pydantic import BaseModel, ValidationError

# User Story: I want Squeak and Speak to use details about my mental health needs, preferences, and location so that I can receive a personalized recommendation for a healthcare professional who matches my needs and preferences.

# Chain 1
# Goal: Identify userâ€™s preferences for a therapist
# Implementation:  This chain retrieves relevant data from the user input and all relevant information from the database. Creating a Pydantic model instance containing all information. At the end, the chain returns the information in a string format.
class UserPreferencesModel(BaseModel):
    mental_health_needs: str
    location: str
    budget: int = None
    online_option: bool = None

class IdentifyUserPreferences:
    def process_input(self, user_input: dict):
        try:
            preferences = UserPreferencesModel(**user_input)
            return preferences
        except ValidationError as e:
            return {"error": str(e)}


# Chain 2
# Goal: Identify the best therapist
# Implementation: This chain processes the user preferences generated by the previous chain, queries the database for the most relevant entries, and retrieves the best matches.
class TherapistFinder:
    def __init__(self, db_manager):
        self.db_manager = db_manager

    def find_best_match(self, preferences):
        query = """
        SELECT * FROM Therapists
        WHERE country = :location
          AND specialty LIKE :mental_health_needs
          AND (avg_consult_price <= :budget OR :budget IS NULL)
          AND (online_option = :online_option OR :online_option IS NULL)
        ORDER BY avg_consult_price ASC
        LIMIT 1
        """
        params = {
            "location": preferences.location,
            "mental_health_needs": f"%{preferences.mental_health_needs}%",
            "budget": preferences.budget,
            "online_option": preferences.online_option,
        }
        results = self.db_manager.select(query, params)
        return results


# Chain 3
# Goal: Output the best therapist
# Implementation: This chain receives both inputs (user input and best therapist match) and generates a final output using a prompt template.
class TherapistOutputFormatter:
    def format_output(self, therapist, user_input):
        if therapist:
            return (
                f"Based on your needs for {user_input['mental_health_needs']}, "
                f"we recommend {therapist[0]['name']} located in {therapist[0]['location']}. "
                f"They charge an average of {therapist[0]['avg_consult_price']}."
            )
        return "No suitable therapist found for your preferences."