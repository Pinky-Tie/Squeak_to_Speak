from pydantic import BaseModel, ValidationError
# User Story: I want the chatbot to recommend support groups to both inform me about the support available and also to help me connect with people who face similar problems.

# Chain 1
# Goal: Identify userâ€™s preferences for a support group
# Implementation: This chain retrieves relevant data from the user input and all relevant information from the database. Creating a Pydantic model instance containing all information. At the end, the chain returns the information in a string format.
class SupportGroupPreferencesModel(BaseModel):
    target_audience: str
    location: str
    budget: int = None
    organization: str = None

class IdentifySupportGroupPreferences:
    def process_input(self, user_input: dict):
        """Process user input to extract preferences."""
        try:
            preferences = SupportGroupPreferencesModel(**user_input)
            return preferences
        except ValidationError as e:
            return {"error": str(e)}


# Chain 2
# Goal: Identify the best support group
# Implementation: This chain processes the user preferences generated by the previous chain, queries the database for the most relevant entries, and retrieves the best matches.
class SupportGroupFinder:
    def __init__(self, db_manager):
        self.db_manager = db_manager

    def find_best_match(self, preferences):
        """Query the database for the best support group matches based on user preferences."""
        query = """
        SELECT * FROM Support_groups
        WHERE country = :location
          AND (target_audience LIKE :target_audience OR :target_audience IS NULL)
          AND (organization = :organization OR :organization IS NULL)
          AND (session_price <= :budget OR :budget IS NULL)
        ORDER BY session_price ASC
        LIMIT 1
        """
        params = {
            "location": preferences.location,
            "target_audience": f"%{preferences.target_audience}%",
            "organization": preferences.organization,
            "budget": preferences.budget,
        }
        results = self.db_manager.select(query, params)
        return results


# Chain 3
# Goal: Output the best support group
# Implementation: This chain receives both inputs (user input and best support group match) and generates a final output using a prompt template.
class SupportGroupOutputFormatter:
    def format_output(self, support_group, user_input):
        """Generate a formatted response for the user."""
        if support_group:
            group = support_group[0]  # Assume result is a list of dicts/rows
            return (
                f"We recommend the '{group['name']}' support group.\n"
                f"Details:\n"
                f"- Type: {group['TYPE']}\n"
                f"- Location: {group['location']}\n"
                f"- Contact: {group['email']} | {group['phone']}\n"
                f"- Website: {group['website']}\n"
                f"- Organization: {group['Organization']}\n"
                f"- Session Price: {group['session_price']} USD"
            )
        return "We couldn't find any support groups matching your preferences. Please try adjusting your criteria."
